[{"content":" アプリの概要 サイゼリヤでランダムにメニューをピックできるアプリがあればおもろそうだなあ，というのが開発のモチベーション．\nここにデプロイしてる．\n開発期間 1日 (実質半日くらい)\n苦難 手元とデプロイ先で挙動に違いがあった． どうやらsetInterval()の利用が原因らしい． なぜ？？\nsetInterval()の利用を制限することで解決したが，根本的な原因はわかっていない．\nGitHub Pagesの仕様な気がする．（同時に実行できるスレッドの本数に制限がある，など）\n所感 研究室の人たちとサイゼルーレット会したらそれなりに盛り上がった．\n普段からパチンコ/スロットやってる人が出したメニューが完璧なコース料理になってた．\nそらそんだけの運持ってたら賭け事やるよなあという気持ちになったし，やっぱり運の良さって人によって違うのかなという思いになった．\nサイゼルーレット会の様子 ","permalink":"https://haur514.github.io/homepage-diary/posts/works/saizeroulette/","summary":" アプリの概要 サイゼリヤでランダムにメニューをピックできるアプリがあればおもろそうだなあ，というのが開発のモチベーション．\nここにデプロイしてる．\n開発期間 1日 (実質半日くらい)\n苦難 手元とデプロイ先で挙動に違いがあった． どうやらsetInterval()の利用が原因らしい． なぜ？？\nsetInterval()の利用を制限することで解決したが，根本的な原因はわかっていない．\nGitHub Pagesの仕様な気がする．（同時に実行できるスレッドの本数に制限がある，など）\n所感 研究室の人たちとサイゼルーレット会したらそれなりに盛り上がった．\n普段からパチンコ/スロットやってる人が出したメニューが完璧なコース料理になってた．\nそらそんだけの運持ってたら賭け事やるよなあという気持ちになったし，やっぱり運の良さって人によって違うのかなという思いになった．\nサイゼルーレット会の様子 ","title":"SaizeRoulette"},{"content":"注意 あんまりインフラに詳しくない大学院生が書いてます． なるべく誤りのないようにしますが， 本記事は僕の日記という側面が強いです． 間違ってても許してください．\n経緯 アルバイトで，ある研究室にGitBucketを導入することになった． その研究室にはすでにIaaSの環境が整っており，自由に利用することができた． 利用予定のサーバのメモリが若干足りていなかったので，増設することになった． メモリを増設したところ，そのサーバで動いてたプロキシサーバがなんか動かなくなった．\nプロキシサーバの動作環境と発生した問題 IaaSに仮想マシンを立て，その上にdockerコンテナを置いてプロキシサーバを立てていた． メモリを増設した後，dockerコンテナ内部から外部へのネット接続が一切できなくなった． たとえば，以下のコマンドが動かない．\ncurl google.com (pingが入ってなかったのでcurl叩いてます)\ndockerコンテナの内部から外部へ繋げないので，プロキシサーバとして機能できなくなっていたようである．\n問題へのアプローチ とりあえず以下を試してみた．\ndockerコンテナの再起動 新たなdockerコンテナの作成 仮装マシンの再起動 サーバ本体の再起動 ここに書いた内容以外のアプローチもしたが，直らない． アルバイト代金は固定額なので，この時点で僕の時給は多分1000円くらいになってた．\nGitBucket用のサーバ導入してデータ突っ込むだけの高コスパバイトだと思ってたのに，なぜ．．．\n前述した1-4のアプローチにより，おそらく仮想マシンかサーバそのものに問題があると予想． この検証のため，新たに仮想マシンを立て，最小構成のプロキシサーバを構築してみた． 結果，プロキシサーバとして利用できることを確認． 問題が仮想マシンそのものにあるらしいとわかった．\n仮想マシンを立て直せばおそらくプロキシサーバを復活させられるだろうと安堵した．\n解決方法 やったことは以下の通り\n新たに仮想マシンを立ち上げる． 仮想マシン内にdockerコンテナを作成し，プロキシサーバを立てる． ssl証明書発行する． プロキシサーバのipアドレスを固定する． 以前までのプロキシサーバを指していたグローバルipアドレスを，新たに立てたプロキシサーバに張り替える． 色々試行錯誤の末，なんとか解決できた． ipアドレス云々の部分でだいぶ躓き，時間を浪費した． ssl証明書とかは，研究室のドキュメントにやり方が載ってたのでかなり参考にした．\n所感 メモリの増設程度で，仮想マシンが動かなくなることあるんだなという思い． ipアドレスとかネットワーク周りの知識が身についた気もする．\n","permalink":"https://haur514.github.io/homepage-diary/posts/diary/rproxy/","summary":"注意 あんまりインフラに詳しくない大学院生が書いてます． なるべく誤りのないようにしますが， 本記事は僕の日記という側面が強いです． 間違ってても許してください．\n経緯 アルバイトで，ある研究室にGitBucketを導入することになった． その研究室にはすでにIaaSの環境が整っており，自由に利用することができた． 利用予定のサーバのメモリが若干足りていなかったので，増設することになった． メモリを増設したところ，そのサーバで動いてたプロキシサーバがなんか動かなくなった．\nプロキシサーバの動作環境と発生した問題 IaaSに仮想マシンを立て，その上にdockerコンテナを置いてプロキシサーバを立てていた． メモリを増設した後，dockerコンテナ内部から外部へのネット接続が一切できなくなった． たとえば，以下のコマンドが動かない．\ncurl google.com (pingが入ってなかったのでcurl叩いてます)\ndockerコンテナの内部から外部へ繋げないので，プロキシサーバとして機能できなくなっていたようである．\n問題へのアプローチ とりあえず以下を試してみた．\ndockerコンテナの再起動 新たなdockerコンテナの作成 仮装マシンの再起動 サーバ本体の再起動 ここに書いた内容以外のアプローチもしたが，直らない． アルバイト代金は固定額なので，この時点で僕の時給は多分1000円くらいになってた．\nGitBucket用のサーバ導入してデータ突っ込むだけの高コスパバイトだと思ってたのに，なぜ．．．\n前述した1-4のアプローチにより，おそらく仮想マシンかサーバそのものに問題があると予想． この検証のため，新たに仮想マシンを立て，最小構成のプロキシサーバを構築してみた． 結果，プロキシサーバとして利用できることを確認． 問題が仮想マシンそのものにあるらしいとわかった．\n仮想マシンを立て直せばおそらくプロキシサーバを復活させられるだろうと安堵した．\n解決方法 やったことは以下の通り\n新たに仮想マシンを立ち上げる． 仮想マシン内にdockerコンテナを作成し，プロキシサーバを立てる． ssl証明書発行する． プロキシサーバのipアドレスを固定する． 以前までのプロキシサーバを指していたグローバルipアドレスを，新たに立てたプロキシサーバに張り替える． 色々試行錯誤の末，なんとか解決できた． ipアドレス云々の部分でだいぶ躓き，時間を浪費した． ssl証明書とかは，研究室のドキュメントにやり方が載ってたのでかなり参考にした．\n所感 メモリの増設程度で，仮想マシンが動かなくなることあるんだなという思い． ipアドレスとかネットワーク周りの知識が身についた気もする．","title":"プロキシサーバに苦しめられた話"},{"content":"Can OpenAI\u0026rsquo;s Codex Fix Bugs? 基礎情報 出典：ICSE 2023\n概要 Codexは既存のDL系APR手法より上手くバグフィックスできるか？ ゼロショットラーニングで勝てる プロンプトエンジニアリングによってCodexの有効性は変わるか？ 変わる． codeと仕様書 (docstr) 渡すのが強い テストを検証用にしか利用していない．（DL系のいくつかも利用してない） 所管 Copilotの裏側，Codexやったんやという思い Codexってアルドノアゼロの火星兵器に近いなって思った． アルドノアゼロ -\u0026gt; 火星でなんか最強の兵器が見つかる． 利用されてる技術は割とブラックボックス ブラックボックスを地球人が頑張って分析し，役立てる Codex -\u0026gt; OpenAIがなんか最強のコーディングアシストAI開発する 利用されてる学習データや細かい技術はブラックボックス ブラックボックスを院生が頑張って分析し，多分役立てられない Automated Program Repair in the Era of Large Pre-trained Language Models LLM系APRツールとSOTAなAPRの比較．(ICSE 2023)\nLLMのパラメータ数が多い方が結果良い\nSOTAなAPRでは解決が困難な問題も，自然言語とプログラムコードを学習したLLMなら解決できる\nLLMの学習データの中に評価データが入ってしまっている可能性もあるが，ヒューマンパッチと異なる修正案も提案できることから，そのまま取ってきてるわけじゃなさそう\n生成したパッチのエントロピーが，plausibleかcorrectか判断する指標になるよ\n既存の研究と一緒 修正対象のソースコード長い方がうまくいくよ\n自動修正適合性の論文で主張されていた内容と一緒 SOTAなAPRの技術と掛け合わせるとLLM系APRの精度上げられるよ\n所感\nCodexが最強すぎた ChatGPTってちゃんと先頭から文章作ってたんや，という驚き 自然言語系の学習を進めないといけないなという思い An Analysis of the Automatic Bug Fixing Performance of ChatGPT アーカイブ論文．\n最近流行りのLLM系APRツール． ChatGPTを使ったAPRがどの程度バグ修正できるか調査してた． Deepl系の手法より精度いいらしい．さすがChatGPT．すごい． 修正してたのがQuixBugsに対してのみなので，学習データから正解データ引っ張ってるだけにも見えた．気もした．\nChatGPTってプログラム組むための機構が入ってるって聞いてたけど，どうなんやろう．\n","permalink":"https://haur514.github.io/homepage-diary/posts/diary/paper/","summary":"Can OpenAI\u0026rsquo;s Codex Fix Bugs? 基礎情報 出典：ICSE 2023\n概要 Codexは既存のDL系APR手法より上手くバグフィックスできるか？ ゼロショットラーニングで勝てる プロンプトエンジニアリングによってCodexの有効性は変わるか？ 変わる． codeと仕様書 (docstr) 渡すのが強い テストを検証用にしか利用していない．（DL系のいくつかも利用してない） 所管 Copilotの裏側，Codexやったんやという思い Codexってアルドノアゼロの火星兵器に近いなって思った． アルドノアゼロ -\u0026gt; 火星でなんか最強の兵器が見つかる． 利用されてる技術は割とブラックボックス ブラックボックスを地球人が頑張って分析し，役立てる Codex -\u0026gt; OpenAIがなんか最強のコーディングアシストAI開発する 利用されてる学習データや細かい技術はブラックボックス ブラックボックスを院生が頑張って分析し，多分役立てられない Automated Program Repair in the Era of Large Pre-trained Language Models LLM系APRツールとSOTAなAPRの比較．(ICSE 2023)\nLLMのパラメータ数が多い方が結果良い\nSOTAなAPRでは解決が困難な問題も，自然言語とプログラムコードを学習したLLMなら解決できる\nLLMの学習データの中に評価データが入ってしまっている可能性もあるが，ヒューマンパッチと異なる修正案も提案できることから，そのまま取ってきてるわけじゃなさそう\n生成したパッチのエントロピーが，plausibleかcorrectか判断する指標になるよ\n既存の研究と一緒 修正対象のソースコード長い方がうまくいくよ\n自動修正適合性の論文で主張されていた内容と一緒 SOTAなAPRの技術と掛け合わせるとLLM系APRの精度上げられるよ\n所感\nCodexが最強すぎた ChatGPTってちゃんと先頭から文章作ってたんや，という驚き 自然言語系の学習を進めないといけないなという思い An Analysis of the Automatic Bug Fixing Performance of ChatGPT アーカイブ論文．\n最近流行りのLLM系APRツール． ChatGPTを使ったAPRがどの程度バグ修正できるか調査してた． Deepl系の手法より精度いいらしい．さすがChatGPT．すごい． 修正してたのがQuixBugsに対してのみなので，学習データから正解データ引っ張ってるだけにも見えた．気もした．","title":"最近読んだ論文"}]